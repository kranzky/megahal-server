#!/usr/bin/env ruby

require 'redis'
require 'megahal'
require 'date'
require 'profanity-filter'

redis = Redis.new(url: ENV.fetch("REDIS_URL") { "redis://localhost:6379/1" })
root_path = ENV.fetch("MOUNT_PATH") { File.dirname(__dir__) }

megahal = MegaHAL.new
megahal.clear

log_path = File.join(root_path, "log", "megahal.log")
FileUtils.mkdir_p(File.dirname(log_path))

brain_path = File.join(root_path, "db", "megahal.brn")
FileUtils.mkdir_p(File.dirname(brain_path))
megahal.load(brain_path) if File.exists?(brain_path)

modified = false
last_modified = Time.now.utc

pf = ProfanityFilter.new

while true
  redis.scan_each(match: "megahal-message:*").each do |key|
    data = JSON.parse(redis.getdel(key), symbolize_names: true)
    received = Time.now.utc
    sent = Time.at(data[:time].to_f).utc
    name = data[:name]
    message = data[:message]
    response = megahal.reply(message)
    key.gsub!("-message:", "-reply:")
    naughty_words = response.split(" ").select { |w| pf.profane?(w) }.sort_by { |w| -w.length }
    filtered_response = naughty_words.reduce(response) { |a, b| a.gsub(b, "*" * b.length) }
    redis.set(key, filtered_response)
    if (last_modified.to_date.mjd != sent.to_date.mjd && File.exists?(log_path))
      FileUtils.mv(log_path, log_path.gsub("megahal.log", "megahal_#{last_modified.to_date}.log"))
    end
    File.write(log_path, "#{sent.to_datetime.iso8601}|#{name}|#{message}\n", mode: "a+")
    File.write(log_path, "#{received.to_datetime.iso8601}|MegaHAL|#{response}\n", mode: "a+")
    modified = true
    last_modified = received
  end
  elapsed = Time.now.utc - last_modified
  if modified && elapsed > 30
    FileUtils.mv(brain_path, brain_path.gsub("brn", "bak")) if File.exists?(brain_path)
    megahal.save(brain_path)
    modified = false
  else
    sleep 0.1
  end
end
